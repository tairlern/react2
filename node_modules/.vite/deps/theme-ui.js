import {
  Emotion$1,
  Global,
  ThemeContext,
  createEmotionProps,
  hasOwnProperty,
  init_emotion_cache_browser_esm,
  init_emotion_element_c39617d8_browser_esm,
  init_emotion_react_browser_esm,
  init_emotion_react_isolated_hnrs_browser_esm,
  init_emotion_serialize_browser_esm,
  init_emotion_use_insertion_effect_with_fallbacks_browser_esm,
  init_emotion_utils_browser_esm,
  init_emotion_weak_memoize_esm,
  jsx,
  require_hoist_non_react_statics_cjs,
  useTheme
} from "./chunk-MZ2FF55G.js";
import {
  init_extends
} from "./chunk-IBMPD23D.js";
import {
  require_jsx_runtime
} from "./chunk-K577UJYR.js";
import {
  require_react
} from "./chunk-AV2VUBUC.js";
import {
  __commonJS,
  __toESM
} from "./chunk-CEQRFMJQ.js";

// node_modules/deepmerge/dist/cjs.js
var require_cjs = __commonJS({
  "node_modules/deepmerge/dist/cjs.js"(exports, module) {
    "use strict";
    var isMergeableObject = function isMergeableObject2(value) {
      return isNonNullObject(value) && !isSpecial(value);
    };
    function isNonNullObject(value) {
      return !!value && typeof value === "object";
    }
    function isSpecial(value) {
      var stringValue = Object.prototype.toString.call(value);
      return stringValue === "[object RegExp]" || stringValue === "[object Date]" || isReactElement(value);
    }
    var canUseSymbol2 = typeof Symbol === "function" && Symbol.for;
    var REACT_ELEMENT_TYPE = canUseSymbol2 ? Symbol.for("react.element") : 60103;
    function isReactElement(value) {
      return value.$$typeof === REACT_ELEMENT_TYPE;
    }
    function emptyTarget(val) {
      return Array.isArray(val) ? [] : {};
    }
    function cloneUnlessOtherwiseSpecified(value, options) {
      return options.clone !== false && options.isMergeableObject(value) ? deepmerge2(emptyTarget(value), value, options) : value;
    }
    function defaultArrayMerge(target, source, options) {
      return target.concat(source).map(function(element) {
        return cloneUnlessOtherwiseSpecified(element, options);
      });
    }
    function getMergeFunction(key, options) {
      if (!options.customMerge) {
        return deepmerge2;
      }
      var customMerge = options.customMerge(key);
      return typeof customMerge === "function" ? customMerge : deepmerge2;
    }
    function getEnumerableOwnPropertySymbols(target) {
      return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function(symbol) {
        return Object.propertyIsEnumerable.call(target, symbol);
      }) : [];
    }
    function getKeys(target) {
      return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));
    }
    function propertyIsOnObject(object, property) {
      try {
        return property in object;
      } catch (_) {
        return false;
      }
    }
    function propertyIsUnsafe(target, key) {
      return propertyIsOnObject(target, key) && !(Object.hasOwnProperty.call(target, key) && Object.propertyIsEnumerable.call(target, key));
    }
    function mergeObject(target, source, options) {
      var destination = {};
      if (options.isMergeableObject(target)) {
        getKeys(target).forEach(function(key) {
          destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
        });
      }
      getKeys(source).forEach(function(key) {
        if (propertyIsUnsafe(target, key)) {
          return;
        }
        if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {
          destination[key] = getMergeFunction(key, options)(target[key], source[key], options);
        } else {
          destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
        }
      });
      return destination;
    }
    function deepmerge2(target, source, options) {
      options = options || {};
      options.arrayMerge = options.arrayMerge || defaultArrayMerge;
      options.isMergeableObject = options.isMergeableObject || isMergeableObject;
      options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;
      var sourceIsArray = Array.isArray(source);
      var targetIsArray = Array.isArray(target);
      var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
      if (!sourceAndTargetTypesMatch) {
        return cloneUnlessOtherwiseSpecified(source, options);
      } else if (sourceIsArray) {
        return options.arrayMerge(target, source, options);
      } else {
        return mergeObject(target, source, options);
      }
    }
    deepmerge2.all = function deepmergeAll(array, options) {
      if (!Array.isArray(array)) {
        throw new Error("first argument should be an array");
      }
      return array.reduce(function(prev, next) {
        return deepmerge2(prev, next, options);
      }, {});
    };
    var deepmerge_1 = deepmerge2;
    module.exports = deepmerge_1;
  }
});

// node_modules/@theme-ui/core/dist/theme-ui-core.browser.esm.js
init_emotion_react_browser_esm();
var React = __toESM(require_react());
var import_deepmerge = __toESM(require_cjs());

// node_modules/@emotion/react/package.json
var package_default = {
  name: "@emotion/react",
  version: "11.11.3",
  main: "dist/emotion-react.cjs.js",
  module: "dist/emotion-react.esm.js",
  browser: {
    "./dist/emotion-react.esm.js": "./dist/emotion-react.browser.esm.js"
  },
  exports: {
    ".": {
      module: {
        worker: "./dist/emotion-react.worker.esm.js",
        browser: "./dist/emotion-react.browser.esm.js",
        default: "./dist/emotion-react.esm.js"
      },
      import: "./dist/emotion-react.cjs.mjs",
      default: "./dist/emotion-react.cjs.js"
    },
    "./jsx-runtime": {
      module: {
        worker: "./jsx-runtime/dist/emotion-react-jsx-runtime.worker.esm.js",
        browser: "./jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js",
        default: "./jsx-runtime/dist/emotion-react-jsx-runtime.esm.js"
      },
      import: "./jsx-runtime/dist/emotion-react-jsx-runtime.cjs.mjs",
      default: "./jsx-runtime/dist/emotion-react-jsx-runtime.cjs.js"
    },
    "./_isolated-hnrs": {
      module: {
        worker: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.worker.esm.js",
        browser: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js",
        default: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.esm.js"
      },
      import: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.mjs",
      default: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.js"
    },
    "./jsx-dev-runtime": {
      module: {
        worker: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.worker.esm.js",
        browser: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.browser.esm.js",
        default: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.esm.js"
      },
      import: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.cjs.mjs",
      default: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.cjs.js"
    },
    "./package.json": "./package.json",
    "./types/css-prop": "./types/css-prop.d.ts",
    "./macro": {
      types: {
        import: "./macro.d.mts",
        default: "./macro.d.ts"
      },
      default: "./macro.js"
    }
  },
  types: "types/index.d.ts",
  files: [
    "src",
    "dist",
    "jsx-runtime",
    "jsx-dev-runtime",
    "_isolated-hnrs",
    "types/*.d.ts",
    "macro.*"
  ],
  sideEffects: false,
  author: "Emotion Contributors",
  license: "MIT",
  scripts: {
    "test:typescript": "dtslint types"
  },
  dependencies: {
    "@babel/runtime": "^7.18.3",
    "@emotion/babel-plugin": "^11.11.0",
    "@emotion/cache": "^11.11.0",
    "@emotion/serialize": "^1.1.3",
    "@emotion/use-insertion-effect-with-fallbacks": "^1.0.1",
    "@emotion/utils": "^1.2.1",
    "@emotion/weak-memoize": "^0.3.1",
    "hoist-non-react-statics": "^3.3.1"
  },
  peerDependencies: {
    react: ">=16.8.0"
  },
  peerDependenciesMeta: {
    "@types/react": {
      optional: true
    }
  },
  devDependencies: {
    "@definitelytyped/dtslint": "0.0.112",
    "@emotion/css": "11.11.2",
    "@emotion/css-prettifier": "1.1.3",
    "@emotion/server": "11.11.0",
    "@emotion/styled": "11.11.0",
    "html-tag-names": "^1.1.2",
    react: "16.14.0",
    "svg-tag-names": "^1.1.1",
    typescript: "^4.5.5"
  },
  repository: "https://github.com/emotion-js/emotion/tree/main/packages/react",
  publishConfig: {
    access: "public"
  },
  "umd:main": "dist/emotion-react.umd.min.js",
  preconstruct: {
    entrypoints: [
      "./index.js",
      "./jsx-runtime.js",
      "./jsx-dev-runtime.js",
      "./_isolated-hnrs.js"
    ],
    umdName: "emotionReact",
    exports: {
      envConditions: [
        "browser",
        "worker"
      ],
      extra: {
        "./types/css-prop": "./types/css-prop.d.ts",
        "./macro": {
          types: {
            import: "./macro.d.mts",
            default: "./macro.d.ts"
          },
          default: "./macro.js"
        }
      }
    }
  }
};

// node_modules/@theme-ui/css/dist/theme-ui-css.browser.esm.js
var THEME_UI_DEFAULT_KEY = "__default";
var hasDefault = (x) => {
  return typeof x === "object" && x !== null && THEME_UI_DEFAULT_KEY in x;
};
function get(obj, path, fallback, p, undef) {
  const pathArray = path && typeof path === "string" ? path.split(".") : [path];
  for (p = 0; p < pathArray.length; p++) {
    obj = obj ? obj[pathArray[p]] : undef;
  }
  if (obj === undef)
    return fallback;
  return hasDefault(obj) ? obj[THEME_UI_DEFAULT_KEY] : obj;
}
var getObjectWithVariants = (obj, theme) => {
  if (obj && obj["variant"]) {
    let result = {};
    for (const key in obj) {
      const x = obj[key];
      if (key === "variant") {
        const val = typeof x === "function" ? x(theme) : x;
        const variant = getObjectWithVariants(get(theme, val), theme);
        result = {
          ...result,
          ...variant
        };
      } else {
        result[key] = x;
      }
    }
    return result;
  }
  return obj;
};
var defaultBreakpoints = [40, 52, 64].map((n) => n + "em");
var defaultTheme = {
  space: [0, 4, 8, 16, 32, 64, 128, 256, 512],
  fontSizes: [12, 14, 16, 20, 24, 32, 48, 64, 72]
};
var aliases = {
  bg: "backgroundColor",
  m: "margin",
  mt: "marginTop",
  mr: "marginRight",
  mb: "marginBottom",
  ml: "marginLeft",
  mx: "marginX",
  my: "marginY",
  p: "padding",
  pt: "paddingTop",
  pr: "paddingRight",
  pb: "paddingBottom",
  pl: "paddingLeft",
  px: "paddingX",
  py: "paddingY"
};
var multiples = {
  marginX: ["marginLeft", "marginRight"],
  marginY: ["marginTop", "marginBottom"],
  paddingX: ["paddingLeft", "paddingRight"],
  paddingY: ["paddingTop", "paddingBottom"],
  scrollMarginX: ["scrollMarginLeft", "scrollMarginRight"],
  scrollMarginY: ["scrollMarginTop", "scrollMarginBottom"],
  scrollPaddingX: ["scrollPaddingLeft", "scrollPaddingRight"],
  scrollPaddingY: ["scrollPaddingTop", "scrollPaddingBottom"],
  size: ["width", "height"]
};
var scales = {
  color: "colors",
  background: "colors",
  backgroundColor: "colors",
  borderColor: "colors",
  caretColor: "colors",
  columnRuleColor: "colors",
  outlineColor: "colors",
  textDecorationColor: "colors",
  opacity: "opacities",
  transition: "transitions",
  margin: "space",
  marginTop: "space",
  marginRight: "space",
  marginBottom: "space",
  marginLeft: "space",
  marginX: "space",
  marginY: "space",
  marginBlock: "space",
  marginBlockEnd: "space",
  marginBlockStart: "space",
  marginInline: "space",
  marginInlineEnd: "space",
  marginInlineStart: "space",
  padding: "space",
  paddingTop: "space",
  paddingRight: "space",
  paddingBottom: "space",
  paddingLeft: "space",
  paddingX: "space",
  paddingY: "space",
  paddingBlock: "space",
  paddingBlockEnd: "space",
  paddingBlockStart: "space",
  paddingInline: "space",
  paddingInlineEnd: "space",
  paddingInlineStart: "space",
  scrollMargin: "space",
  scrollMarginTop: "space",
  scrollMarginRight: "space",
  scrollMarginBottom: "space",
  scrollMarginLeft: "space",
  scrollMarginX: "space",
  scrollMarginY: "space",
  scrollPadding: "space",
  scrollPaddingTop: "space",
  scrollPaddingRight: "space",
  scrollPaddingBottom: "space",
  scrollPaddingLeft: "space",
  scrollPaddingX: "space",
  scrollPaddingY: "space",
  inset: "space",
  insetBlock: "space",
  insetBlockEnd: "space",
  insetBlockStart: "space",
  insetInline: "space",
  insetInlineEnd: "space",
  insetInlineStart: "space",
  top: "space",
  right: "space",
  bottom: "space",
  left: "space",
  gridGap: "space",
  gridColumnGap: "space",
  gridRowGap: "space",
  gap: "space",
  columnGap: "space",
  rowGap: "space",
  fontFamily: "fonts",
  fontSize: "fontSizes",
  fontWeight: "fontWeights",
  lineHeight: "lineHeights",
  letterSpacing: "letterSpacings",
  border: "borders",
  borderTop: "borders",
  borderRight: "borders",
  borderBottom: "borders",
  borderLeft: "borders",
  borderWidth: "borderWidths",
  borderStyle: "borderStyles",
  borderRadius: "radii",
  borderTopRightRadius: "radii",
  borderTopLeftRadius: "radii",
  borderBottomRightRadius: "radii",
  borderBottomLeftRadius: "radii",
  borderTopWidth: "borderWidths",
  borderTopColor: "colors",
  borderTopStyle: "borderStyles",
  borderBottomWidth: "borderWidths",
  borderBottomColor: "colors",
  borderBottomStyle: "borderStyles",
  borderLeftWidth: "borderWidths",
  borderLeftColor: "colors",
  borderLeftStyle: "borderStyles",
  borderRightWidth: "borderWidths",
  borderRightColor: "colors",
  borderRightStyle: "borderStyles",
  borderBlock: "borders",
  borderBlockColor: "colors",
  borderBlockEnd: "borders",
  borderBlockEndColor: "colors",
  borderBlockEndStyle: "borderStyles",
  borderBlockEndWidth: "borderWidths",
  borderBlockStart: "borders",
  borderBlockStartColor: "colors",
  borderBlockStartStyle: "borderStyles",
  borderBlockStartWidth: "borderWidths",
  borderBlockStyle: "borderStyles",
  borderBlockWidth: "borderWidths",
  borderEndEndRadius: "radii",
  borderEndStartRadius: "radii",
  borderInline: "borders",
  borderInlineColor: "colors",
  borderInlineEnd: "borders",
  borderInlineEndColor: "colors",
  borderInlineEndStyle: "borderStyles",
  borderInlineEndWidth: "borderWidths",
  borderInlineStart: "borders",
  borderInlineStartColor: "colors",
  borderInlineStartStyle: "borderStyles",
  borderInlineStartWidth: "borderWidths",
  borderInlineStyle: "borderStyles",
  borderInlineWidth: "borderWidths",
  borderStartEndRadius: "radii",
  borderStartStartRadius: "radii",
  columnRuleWidth: "borderWidths",
  boxShadow: "shadows",
  textShadow: "shadows",
  zIndex: "zIndices",
  width: "sizes",
  minWidth: "sizes",
  maxWidth: "sizes",
  height: "sizes",
  minHeight: "sizes",
  maxHeight: "sizes",
  flexBasis: "sizes",
  size: "sizes",
  blockSize: "sizes",
  inlineSize: "sizes",
  maxBlockSize: "sizes",
  maxInlineSize: "sizes",
  minBlockSize: "sizes",
  minInlineSize: "sizes",
  columnWidth: "sizes",
  // svg
  fill: "colors",
  stroke: "colors"
};
var positiveOrNegative = (scale, value) => {
  if (typeof value !== "number" || value >= 0) {
    if (typeof value === "string" && value.startsWith("-")) {
      const valueWithoutMinus = value.substring(1);
      const n2 = get(scale, valueWithoutMinus, valueWithoutMinus);
      if (typeof n2 === "number") {
        return n2 * -1;
      }
      return `-${n2}`;
    }
    return get(scale, value, value);
  }
  const absolute = Math.abs(value);
  const n = get(scale, absolute, absolute);
  if (typeof n === "string")
    return "-" + n;
  return Number(n) * -1;
};
var transforms = ["margin", "marginTop", "marginRight", "marginBottom", "marginLeft", "marginX", "marginY", "marginBlock", "marginBlockEnd", "marginBlockStart", "marginInline", "marginInlineEnd", "marginInlineStart", "top", "bottom", "left", "right"].reduce((acc, curr) => ({
  ...acc,
  [curr]: positiveOrNegative
}), {});
var responsive = (styles) => (theme) => {
  const next = {};
  const breakpoints = theme && theme.breakpoints || defaultBreakpoints;
  const mediaQueries = [null, ...breakpoints.map((n) => n.includes("@media") ? n : `@media screen and (min-width: ${n})`)];
  for (const k in styles) {
    const key = k;
    let value = styles[key];
    if (typeof value === "function") {
      value = value(theme || {});
    }
    if (value === false || value == null) {
      continue;
    }
    if (!Array.isArray(value)) {
      next[key] = value;
      continue;
    }
    for (let i = 0; i < value.slice(0, mediaQueries.length).length; i++) {
      const media = mediaQueries[i];
      if (!media) {
        next[key] = value[i];
        continue;
      }
      next[media] = next[media] || {};
      if (value[i] == null)
        continue;
      next[media][key] = value[i];
    }
  }
  return next;
};
var css = (args = {}) => (props = {}) => {
  const theme = {
    ...defaultTheme,
    ..."theme" in props ? props.theme : props
  };
  const obj = getObjectWithVariants(typeof args === "function" ? args(theme) : args, theme);
  const styles = responsive(obj)(theme);
  let result = {};
  for (const key in styles) {
    const x = styles[key];
    const val = typeof x === "function" ? x(theme) : x;
    if (val && typeof val === "object") {
      if (hasDefault(val)) {
        result[key] = val[THEME_UI_DEFAULT_KEY];
        continue;
      }
      result[key] = css(val)(theme);
      continue;
    }
    const prop = key in aliases ? aliases[key] : key;
    const scaleName = prop in scales ? scales[prop] : void 0;
    const scale = scaleName ? theme == null ? void 0 : theme[scaleName] : get(theme, prop, {});
    const transform = get(transforms, prop, get);
    const value = transform(scale, val, val);
    if (prop in multiples) {
      const dirs = multiples[prop];
      for (let i = 0; i < dirs.length; i++) {
        result[dirs[i]] = value;
      }
    } else {
      result[prop] = value;
    }
  }
  return result;
};

// node_modules/@theme-ui/core/dist/parseProps-780b287c.browser.esm.js
var getCSS = (props) => (theme) => {
  const styles = css(props.sx)(theme);
  const raw = typeof props.css === "function" ? props.css(theme) : props.css;
  return [styles, raw];
};
function parseProps(props) {
  if (!props || !props.sx && !props.css)
    return props;
  const next = {};
  for (let key in props) {
    if (key === "sx")
      continue;
    next[key] = props[key];
  }
  next.css = getCSS(props);
  return next;
}

// node_modules/@theme-ui/core/dist/theme-ui-core.browser.esm.js
var __EMOTION_VERSION__ = package_default.version;
var jsx2 = (type, props, ...children) => jsx(type, parseProps(props), ...children);
var createElement = jsx2;
var __themeUiDefaultContextValue = {
  __EMOTION_VERSION__,
  theme: {}
};
var __ThemeUIContext = React.createContext(__themeUiDefaultContextValue);
var useThemeUI = () => React.useContext(__ThemeUIContext);
var canUseSymbol = typeof Symbol === "function" && Symbol.for;
var REACT_ELEMENT = canUseSymbol ? Symbol.for("react.element") : 60103;
var FORWARD_REF = canUseSymbol ? Symbol.for("react.forward_ref") : 60103;
var deepmergeOptions = {
  isMergeableObject: (n) => {
    return !!n && typeof n === "object" && n.$$typeof !== REACT_ELEMENT && n.$$typeof !== FORWARD_REF;
  },
  arrayMerge: (_leftArray, rightArray) => rightArray
};
var merge = (a, b) => (0, import_deepmerge.default)(a, b, deepmergeOptions);
function mergeAll(...args) {
  return import_deepmerge.default.all(args, deepmergeOptions);
}
merge.all = mergeAll;
var __ThemeUIInternalBaseThemeProvider = ({
  context,
  children
}) => jsx2(ThemeContext.Provider, {
  value: context.theme
}, jsx2(__ThemeUIContext.Provider, {
  value: context,
  children
}));
function ThemeProvider({
  theme,
  children
}) {
  const outer = useThemeUI();
  if (true) {
    if (outer.__EMOTION_VERSION__ !== __EMOTION_VERSION__) {
      console.warn("Multiple versions of Emotion detected,", "and theming might not work as expected.", "Please ensure there is only one copy of @emotion/react installed in your application.");
    }
  }
  const context = typeof theme === "function" ? {
    ...outer,
    theme: theme(outer.theme)
  } : merge.all({}, outer, {
    theme
  });
  return jsx2(__ThemeUIInternalBaseThemeProvider, {
    context,
    children
  });
}

// node_modules/@theme-ui/color-modes/dist/theme-ui-color-modes.esm.js
var import_react4 = __toESM(require_react());
init_emotion_react_browser_esm();

// node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js
var ReactJSXRuntime = __toESM(require_jsx_runtime());
init_emotion_element_c39617d8_browser_esm();
var import_react2 = __toESM(require_react());
init_emotion_cache_browser_esm();
init_extends();
init_emotion_weak_memoize_esm();
init_emotion_react_isolated_hnrs_browser_esm();
var import_hoist_non_react_statics = __toESM(require_hoist_non_react_statics_cjs());
init_emotion_utils_browser_esm();
init_emotion_serialize_browser_esm();
init_emotion_use_insertion_effect_with_fallbacks_browser_esm();
function jsx4(type, props, key) {
  if (!hasOwnProperty.call(props, "css")) {
    return ReactJSXRuntime.jsx(type, props, key);
  }
  return ReactJSXRuntime.jsx(Emotion$1, createEmotionProps(type, props), key);
}
function jsxs2(type, props, key) {
  if (!hasOwnProperty.call(props, "css")) {
    return ReactJSXRuntime.jsxs(type, props, key);
  }
  return ReactJSXRuntime.jsxs(Emotion$1, createEmotionProps(type, props), key);
}

// node_modules/@theme-ui/core/jsx-runtime/dist/theme-ui-core-jsx-runtime.browser.esm.js
var import_react3 = __toESM(require_react());
var jsx5 = (type, props, key) => jsx4(type, parseProps(props), key);
var jsxs3 = (type, props, key) => jsxs2(type, parseProps(props), key);

// node_modules/@theme-ui/color-modes/dist/theme-ui-color-modes.esm.js
var toVarName = (key) => `--theme-ui-${key.replace("-__default", "")}`;
var toVarValue = (key) => `var(${toVarName(key)})`;
var join = (...args) => args.filter(Boolean).join("-");
var reservedKeys = /* @__PURE__ */ new Set(["useCustomProperties", "initialColorModeName", "printColorModeName", "initialColorMode", "useLocalStorage", "config"]);
var toCustomProperties = (obj, parent) => {
  const next = Array.isArray(obj) ? [] : {};
  for (let key in obj) {
    const value = obj[key];
    const name = join(parent, key);
    if (value && typeof value === "object") {
      next[key] = toCustomProperties(value, name);
      continue;
    }
    if (reservedKeys.has(key)) {
      next[key] = value;
      continue;
    }
    next[key] = toVarValue(name);
  }
  return next;
};
var __objectToVars = (parent, obj) => {
  let vars = {};
  for (let key in obj) {
    if (key === "modes")
      continue;
    const name = join(parent, key);
    const value = obj[key];
    if (value && typeof value === "object") {
      vars = {
        ...vars,
        ...__objectToVars(name, value)
      };
    } else {
      vars[toVarName(name)] = value;
    }
  }
  return vars;
};
var __createColorStyles = (theme = {}) => {
  const {
    useCustomProperties,
    initialColorModeName,
    printColorModeName,
    useRootStyles
  } = theme.config || theme || {};
  const colors = theme.rawColors || theme.colors;
  if (!colors || useRootStyles === false)
    return {};
  if (useCustomProperties === false) {
    return css({
      color: "text",
      bg: "background"
    })(theme);
  }
  const modes = colors.modes || {};
  const styles = __createColorProperties(colors, modes);
  if (printColorModeName) {
    let printMode = modes[printColorModeName];
    if (!printMode && printColorModeName === initialColorModeName)
      printMode = colors;
    if (printMode) {
      styles["@media print"] = __objectToVars("colors", printMode);
    } else {
      console.error(`Theme UI \`printColorModeName\` was not found in colors scale`, {
        colors,
        printColorModeName
      });
    }
  }
  const colorToVarValue = (color) => toVarValue(`colors-${color}`);
  return css({
    ...styles,
    color: colorToVarValue("text"),
    bg: colorToVarValue("background")
  })(theme);
};
function __createColorProperties(colors, modes) {
  const styles = __objectToVars("colors", colors);
  Object.keys(modes).forEach((mode) => {
    const className = `.theme-ui-${mode}`;
    const key = `&${className}, ${className} &`;
    styles[key] = __objectToVars("colors", modes[mode]);
  });
  return styles;
}
var STORAGE_KEY = "theme-ui-color-mode";
var DARK_QUERY = "(prefers-color-scheme: dark)";
var LIGHT_QUERY = "(prefers-color-scheme: light)";
var storage = {
  get: () => {
    try {
      return window.localStorage.getItem(STORAGE_KEY);
    } catch (err) {
      console.warn("localStorage is disabled and color mode might not work as expected.", "Please check your Site Settings.", err);
    }
  },
  set: (value) => {
    try {
      window.localStorage.setItem(STORAGE_KEY, value);
    } catch (err) {
      console.warn("localStorage is disabled and color mode might not work as expected.", "Please check your Site Settings.", err);
    }
  }
};
var getPreferredColorScheme = () => {
  if (typeof window !== "undefined" && window.matchMedia) {
    if (window.matchMedia(DARK_QUERY).matches) {
      return "dark";
    }
    if (window.matchMedia(LIGHT_QUERY).matches) {
      return "light";
    }
  }
  return null;
};
var useClientsideEffect = typeof window === "undefined" ? () => {
} : import_react4.useLayoutEffect;
var TopLevelColorModeProvider = ({
  outerCtx,
  children
}) => {
  const outerTheme = outerCtx.theme || {};
  const {
    initialColorModeName,
    useColorSchemeMediaQuery,
    useLocalStorage
  } = outerTheme.config || outerTheme;
  let [colorMode, setColorMode] = (0, import_react4.useState)(() => {
    const preferredMode = useColorSchemeMediaQuery !== false && getPreferredColorScheme();
    return preferredMode || initialColorModeName;
  });
  useClientsideEffect(() => {
    const stored = useLocalStorage !== false && storage.get();
    if (typeof document !== "undefined") {
      document.documentElement.classList.remove("theme-ui-" + stored);
    }
    if (useColorSchemeMediaQuery !== "system" && stored && stored !== colorMode) {
      colorMode = stored;
      setColorMode(stored);
    }
  }, []);
  (0, import_react4.useEffect)(() => {
    if (colorMode && useLocalStorage !== false) {
      storage.set(colorMode);
    }
  }, [colorMode, useLocalStorage]);
  const setPreferredColorScheme = (0, import_react4.useCallback)(() => {
    const preferredColorScheme = getPreferredColorScheme();
    setColorMode(preferredColorScheme || initialColorModeName);
  }, [initialColorModeName]);
  (0, import_react4.useEffect)(() => {
    if (useColorSchemeMediaQuery === "system" && window.matchMedia) {
      const darkMQL = window.matchMedia(DARK_QUERY);
      if (typeof darkMQL.addEventListener === "function") {
        darkMQL.addEventListener("change", setPreferredColorScheme);
      } else if (typeof darkMQL.addListener === "function") {
        darkMQL.addListener(setPreferredColorScheme);
      }
    }
    return () => {
      if (useColorSchemeMediaQuery === "system" && window.matchMedia) {
        const darkMQL = window.matchMedia(DARK_QUERY);
        if (typeof darkMQL.removeEventListener === "function") {
          darkMQL.removeEventListener("change", setPreferredColorScheme);
        } else if (typeof darkMQL.removeListener === "function") {
          darkMQL.removeListener(setPreferredColorScheme);
        }
      }
    };
  }, [useColorSchemeMediaQuery, setPreferredColorScheme]);
  if (true) {
    var _outerTheme$colors, _outerTheme$colors2;
    if ((_outerTheme$colors = outerTheme.colors) != null && _outerTheme$colors.modes && initialColorModeName && Object.keys(outerTheme.colors.modes).indexOf(initialColorModeName) > -1) {
      console.warn("[theme-ui] The `initialColorModeName` value should be a unique name and cannot reference a key in `theme.colors.modes`.");
    }
    const allColorKeys = [];
    const flattenKeys = (obj) => {
      Object.keys(obj).forEach((key) => {
        allColorKeys.push(key);
        if (typeof obj[key] === "object") {
          flattenKeys(obj[key]);
        }
      });
      return allColorKeys;
    };
    flattenKeys((_outerTheme$colors2 = outerTheme.colors) != null ? _outerTheme$colors2 : {}).forEach((color) => {
      if (color !== color.trim()) {
        console.warn(`[theme-ui] Key \`${color}\` in theme.colors contains leading/trailing whitespace, which can cause bugs in your project.`);
      }
    });
  }
  const newTheme = useThemeWithAppliedColorMode({
    colorMode,
    outerTheme
  });
  const newCtx = {
    ...outerCtx,
    theme: newTheme,
    colorMode,
    setColorMode
  };
  return jsxs3(__ThemeUIInternalBaseThemeProvider, {
    context: newCtx,
    children: [jsx5(GlobalColorStyles, {
      theme: newTheme
    }), children]
  });
};
function useColorMode() {
  const {
    colorMode,
    setColorMode
  } = useThemeUI();
  if (typeof setColorMode !== "function") {
    throw new Error(`[useColorMode] requires the ColorModeProvider component`);
  }
  return [colorMode, setColorMode];
}
var omitModes = (colors) => {
  const res = {
    ...colors
  };
  delete res.modes;
  return res;
};
function copyRawColors(colors, outerThemeRawColors) {
  for (const [key, value] of Object.entries(colors)) {
    if (typeof value === "string" && !value.startsWith("var(")) {
      outerThemeRawColors[key] = value;
    } else if (typeof value === "object") {
      const newValue = {
        ...outerThemeRawColors[key]
      };
      copyRawColors(value, newValue);
      outerThemeRawColors[key] = newValue;
    }
  }
}
function useThemeWithAppliedColorMode({
  outerTheme,
  colorMode
}) {
  const theme = (0, import_react4.useMemo)(() => {
    const res = {
      ...outerTheme
    };
    const modes = get(res, "colors.modes", {});
    const currentColorMode = get(modes, colorMode, {});
    if (colorMode) {
      res.colors = {
        ...res.colors,
        ...currentColorMode
      };
    }
    const {
      useCustomProperties,
      initialColorModeName = "__default"
    } = outerTheme.config || outerTheme;
    let outerThemeRawColors = outerTheme.rawColors || outerTheme.colors || {};
    if (useCustomProperties !== false) {
      const alreadyHasRawColors = res.rawColors != null;
      const colors = res.colors || {};
      if (alreadyHasRawColors) {
        outerThemeRawColors = {
          ...outerThemeRawColors
        };
        copyRawColors(colors, outerThemeRawColors);
        if (outerThemeRawColors.modes) {
          outerThemeRawColors.modes[initialColorModeName] = omitModes(outerThemeRawColors);
        }
        res.rawColors = outerThemeRawColors;
      } else {
        if (!("modes" in outerThemeRawColors)) {
          res.rawColors = colors;
        } else {
          const modes2 = {
            [initialColorModeName]: omitModes(outerThemeRawColors),
            ...outerThemeRawColors.modes
          };
          res.rawColors = {
            ...colors,
            modes: modes2
          };
        }
      }
      res.colors = toCustomProperties(omitModes(outerThemeRawColors), "colors");
    }
    return res;
  }, [colorMode, outerTheme]);
  return theme;
}
function GlobalColorStyles({
  theme
}) {
  return jsx2(Global, {
    styles: () => {
      return {
        html: __createColorStyles(theme)
      };
    }
  });
}
function NestedColorModeProvider({
  outerCtx,
  children
}) {
  var _newTheme$config2;
  const newTheme = useThemeWithAppliedColorMode({
    outerTheme: outerCtx.theme,
    colorMode: outerCtx.colorMode
  });
  const [needsRerender, setNeedsRerender] = (0, import_react4.useState)(
    // Note: we could also check some "ssr-enabled" flag as an optimization for
    // SPAs, as deeply nested theme providers will also pay a performance penalty
    // for this SSR bug fix
    () => {
      var _newTheme$config;
      return ((_newTheme$config = newTheme.config) == null ? void 0 : _newTheme$config.useLocalStorage) !== false;
    }
  );
  useClientsideEffect(() => void setNeedsRerender(false), []);
  const themeColors = newTheme.rawColors || newTheme.colors;
  const useCustomProperties = (_newTheme$config2 = newTheme.config) == null ? void 0 : _newTheme$config2.useCustomProperties;
  const colorVars = (0, import_react4.useMemo)(() => {
    if (useCustomProperties === false) {
      return {};
    }
    const colors = themeColors || {};
    return css(__createColorProperties(colors, colors.modes || {}))(newTheme);
  }, [newTheme, themeColors, useCustomProperties]);
  return jsx5(__ThemeUIInternalBaseThemeProvider, {
    context: {
      ...outerCtx,
      theme: newTheme
    },
    children: jsx2("div", {
      "data-themeui-nested-provider": true,
      // the key here ensures that children will be rerendered after color
      // mode is read from localStorage
      key: Number(needsRerender),
      suppressHydrationWarning: true,
      css: colorVars,
      children
    })
  });
}
var ColorModeProvider = ({
  children
}) => {
  const outerCtx = useThemeUI();
  const isTopLevelColorModeProvider = typeof outerCtx.setColorMode !== "function";
  return isTopLevelColorModeProvider ? jsx5(TopLevelColorModeProvider, {
    outerCtx,
    children
  }) : jsx5(NestedColorModeProvider, {
    outerCtx,
    children
  });
};
var noflash = `(function() { try {
  var mode = localStorage.getItem('theme-ui-color-mode');
  if (!mode) return
  document.documentElement.classList.add('theme-ui-' + mode);
} catch (e) {} })();`;
var InitializeColorMode = () => jsx2("script", {
  key: "theme-ui-no-flash",
  dangerouslySetInnerHTML: {
    __html: noflash
  }
});

// node_modules/@theme-ui/theme-provider/dist/theme-ui-theme-provider.esm.js
var import_react6 = __toESM(require_react());
init_emotion_react_browser_esm();
var RootStyles = () => jsx2(Global, {
  styles: (emotionTheme) => {
    var _theme$config;
    const theme = emotionTheme;
    const {
      useRootStyles
    } = theme.config || theme;
    if (useRootStyles === false || theme.styles && !theme.styles.root) {
      return null;
    }
    const boxSizing = ((_theme$config = theme.config) == null ? void 0 : _theme$config.useBorderBox) === false ? void 0 : "border-box";
    return css({
      "*": {
        boxSizing
      },
      html: {
        variant: "styles.root"
      },
      body: {
        margin: 0
      }
    })(theme);
  }
});
var ThemeUIProvider = ({
  theme,
  children
}) => {
  const outer = useThemeUI();
  const isTopLevel = outer === __themeUiDefaultContextValue;
  return jsx5(ThemeProvider, {
    theme,
    children: jsxs3(ColorModeProvider, {
      children: [isTopLevel && jsx5(RootStyles, {}), children]
    })
  });
};
var ThemeProvider2 = ({
  theme,
  children
}) => {
  import_react6.default.useEffect(() => {
    if (true) {
      console.warn("[theme-ui] The export ThemeUIProvider is deprecated and is now called ThemeProvider to reduce confusion with Emotion. Please update your import; ThemeUIProvider will be removed in a future version.");
    }
  }, []);
  const outer = useThemeUI();
  const isTopLevel = outer === __themeUiDefaultContextValue;
  return jsx5(ThemeProvider, {
    theme,
    children: jsxs3(ColorModeProvider, {
      children: [isTopLevel && jsx5(RootStyles, {}), children]
    })
  });
};

// node_modules/@theme-ui/global/dist/theme-ui-global.esm.js
init_emotion_react_browser_esm();
var Global2 = ({
  styles
}) => jsx2(Global, {
  styles: (emotionTheme) => {
    const theme = emotionTheme;
    return css(styles)(theme);
  }
});

// node_modules/@theme-ui/components/dist/theme-ui-components.esm.js
init_emotion_react_browser_esm();
var import_react10 = __toESM(require_react());
var boxSystemProps = [
  // space scale props (inherited from @styled-system/space)
  "margin",
  "marginTop",
  "marginRight",
  "marginBottom",
  "marginLeft",
  "marginX",
  "marginY",
  "m",
  "mt",
  "mr",
  "mb",
  "ml",
  "mx",
  "my",
  "padding",
  "paddingTop",
  "paddingRight",
  "paddingBottom",
  "paddingLeft",
  "paddingX",
  "paddingY",
  "p",
  "pt",
  "pr",
  "pb",
  "pl",
  "px",
  "py",
  // color props (inherited from @styled-system/color)
  "color",
  "backgroundColor",
  "bg",
  "opacity"
];
var __isBoxStyledSystemProp = (prop) => boxSystemProps.includes(prop);
var pickSystemProps = (props) => {
  const res = {};
  for (const key of boxSystemProps) {
    res[key] = props[key];
  }
  return res;
};
var Box$1 = (0, import_react10.forwardRef)(function Box(props, ref) {
  const theme = useTheme();
  const {
    __themeKey = "variants",
    __css,
    variant,
    css: cssProp,
    sx,
    as: Component = "div",
    ...rest
  } = props;
  const baseStyles = {
    boxSizing: "border-box",
    margin: 0,
    minWidth: 0
  };
  const __cssStyles = css(__css)(theme);
  const variantInTheme = get(theme, `${__themeKey}.${variant}`) || get(theme, variant);
  const variantStyles = variantInTheme && css(variantInTheme)(theme);
  const sxPropStyles = css(sx)(theme);
  const systemPropsStyles = css(pickSystemProps(rest))(theme);
  const style = [baseStyles, __cssStyles, variantStyles, sxPropStyles, systemPropsStyles, cssProp];
  boxSystemProps.forEach((name) => {
    delete rest[name];
  });
  return jsx5(Component, {
    ref,
    css: style,
    ...rest
  });
});
var Flex = import_react10.default.forwardRef(function Flex2(props, ref) {
  return jsx5(Box$1, {
    ref,
    ...props,
    sx: {
      display: "flex",
      ...props.sx
    }
  });
});
var getProps = (test) => (props) => {
  const next = {};
  for (const key in props) {
    if (test(key || ""))
      next[key] = props[key];
  }
  return next;
};
var MRE = /^m[trblxy]?$/;
var getMargin = getProps((k) => MRE.test(k));
var omitMargin = getProps((k) => !MRE.test(k));
function __internalProps(props) {
  return props;
}
var px = (n) => typeof n === "number" ? n + "px" : n;
var singleWidthToColumns = (width, repeat) => width ? `repeat(auto-${repeat}, minmax(${px(width)}, 1fr))` : null;
var widthToColumns = (width, repeat) => Array.isArray(width) ? width.map((w) => singleWidthToColumns(w, repeat)) : singleWidthToColumns(width, repeat);
var singleCountToColumns = (n) => n ? typeof n === "number" ? `repeat(${n}, 1fr)` : n : null;
var countToColumns = (n) => Array.isArray(n) ? n.map(singleCountToColumns) : singleCountToColumns(n);
var Grid = import_react10.default.forwardRef(function Grid2({
  width,
  columns,
  gap = 3,
  repeat = "fit",
  ...props
}, ref) {
  const gridTemplateColumns = !!width ? widthToColumns(width, repeat) : countToColumns(columns);
  const __css = {
    display: "grid",
    gridGap: gap,
    gridTemplateColumns
  };
  return jsx5(Box$1, {
    ref,
    ...props,
    ...__internalProps({
      __themeKey: "grids",
      __css
    })
  });
});
var Box2 = Box$1;
var Button = import_react10.default.forwardRef(function Button2(props, ref) {
  return jsx5(Box2, {
    ref,
    as: "button",
    variant: "primary",
    ...props,
    ...__internalProps({
      __themeKey: "buttons",
      __css: {
        appearance: "none",
        display: props.hidden ? void 0 : "inline-block",
        textAlign: "center",
        lineHeight: "inherit",
        textDecoration: "none",
        fontSize: "inherit",
        px: 3,
        py: 2,
        color: "white",
        bg: "primary",
        border: 0,
        borderRadius: 4
      }
    })
  });
});
var Link = import_react10.default.forwardRef(function Link2(props, ref) {
  return jsx5(Box$1, {
    ref,
    as: "a",
    variant: "styles.a",
    ...props,
    ...__internalProps({
      __themeKey: "links"
    })
  });
});
var Paragraph = import_react10.default.forwardRef(function Paragraph2(props, ref) {
  return jsx5(Box$1, {
    ref,
    as: "p",
    variant: "paragraph",
    ...props,
    ...__internalProps({
      __themeKey: "text",
      __css: {
        fontFamily: "body",
        fontWeight: "body",
        lineHeight: "body"
      }
    })
  });
});
var Text = import_react10.default.forwardRef(function Text2(props, ref) {
  return jsx5(Box$1, {
    as: "span",
    ref,
    variant: "default",
    ...props,
    ...__internalProps({
      __themeKey: "text"
    })
  });
});
var Heading = import_react10.default.forwardRef(function Heading2(props, ref) {
  return jsx5(Box$1, {
    ref,
    as: "h2",
    variant: "heading",
    ...props,
    ...__internalProps({
      __themeKey: "text",
      __css: {
        fontFamily: "heading",
        fontWeight: "heading",
        lineHeight: "heading"
      }
    })
  });
});
var Image = import_react10.default.forwardRef(function Image2(props, ref) {
  const __outerCss = props.__css;
  return jsx5(Box$1, {
    ref,
    as: "img",
    ...props,
    ...__internalProps({
      __themeKey: "images",
      __css: {
        maxWidth: "100%",
        height: "auto",
        ...__outerCss
      }
    })
  });
});
var Card = import_react10.default.forwardRef(function Card2(props, ref) {
  return jsx5(Box$1, {
    ref,
    variant: "primary",
    ...props,
    ...__internalProps({
      __themeKey: "cards"
    })
  });
});
var Label = import_react10.default.forwardRef(function Label2(props, ref) {
  return jsx5(Box$1, {
    ref,
    as: "label",
    variant: "label",
    ...props,
    ...__internalProps({
      __themeKey: "forms",
      __css: {
        width: "100%",
        display: "flex"
      }
    })
  });
});
var autofillStyles = {
  boxShadow: "inset 0 0 0 1000px var(--theme-ui-input-autofill-bg)",
  fontSize: "inherit",
  ":first-line": {
    fontSize: "1rem"
  }
};
var defaultInputStyles = {
  display: "block",
  width: "100%",
  p: 2,
  appearance: "none",
  fontSize: "inherit",
  lineHeight: "inherit",
  border: "1px solid",
  borderRadius: 4,
  color: "inherit",
  bg: "transparent",
  ":autofill, :autofill:hover, :autofill:focus": autofillStyles,
  ":-webkit-autofill, :-webkit-autofill:hover, :-webkit-autofill:focus": autofillStyles
};
var Input = import_react10.default.forwardRef(function Input2({
  sx,
  autofillBackgroundColor = "background",
  ...rest
}, ref) {
  return jsx5(Box$1, {
    ref,
    as: "input",
    variant: "input",
    sx: {
      "--theme-ui-input-autofill-bg": (theme) => theme.colors && get(theme.colors, autofillBackgroundColor, null),
      ...sx
    },
    ...rest,
    ...__internalProps({
      __themeKey: "forms",
      __css: defaultInputStyles
    })
  });
});
var SVG = import_react10.default.forwardRef(function SVG2({
  size = 24,
  ...rest
}, ref) {
  const svgProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: size,
    height: size,
    viewBox: "0 0 24 24",
    fill: "currentcolor",
    ...rest
  };
  return jsx5(Box$1, {
    ref,
    as: "svg",
    ...svgProps
  });
});
SVG.displayName = "SVG";
var DownArrow = (props) => jsx5(SVG, {
  ...props,
  children: jsx5("path", {
    d: "M7 10l5 5 5-5z"
  })
});
var Select = import_react10.default.forwardRef(function Select2({
  arrow,
  ...props
}, ref) {
  const __css = {
    display: "block",
    width: "100%",
    p: 2,
    paddingRight: 4,
    appearance: "none",
    fontSize: "inherit",
    lineHeight: "inherit",
    border: "1px solid",
    borderRadius: 4,
    color: "inherit",
    backgroundColor: (theme) => get(theme, "colors.background", null)
  };
  return jsxs3(Box$1, {
    ...getMargin(props),
    sx: {
      display: "flex"
    },
    children: [jsx5(Box$1, {
      ref,
      as: "select",
      variant: "select",
      ...omitMargin(props),
      ...__internalProps({
        __themeKey: "forms",
        __css
      })
    }), arrow || jsx5(DownArrow, {
      sx: {
        ml: -28,
        alignSelf: "center",
        pointerEvents: "none"
      }
    })]
  });
});
var Textarea = import_react10.default.forwardRef(function Textarea2(props, ref) {
  return jsx5(Box$1, {
    ref,
    as: "textarea",
    variant: "textarea",
    ...props,
    ...__internalProps({
      __themeKey: "forms",
      __css: {
        display: "block",
        width: "100%",
        p: 2,
        appearance: "none",
        fontSize: "inherit",
        lineHeight: "inherit",
        border: "1px solid",
        borderRadius: 4,
        color: "inherit",
        bg: "transparent"
      }
    })
  });
});
var RadioChecked = (props) => jsx5(SVG, {
  ...props,
  children: jsx5("path", {
    d: "M12 7c-2.76 0-5 2.24-5 5s2.24 5 5 5 5-2.24 5-5-2.24-5-5-5zm0-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
  })
});
var RadioUnchecked = (props) => jsx5(SVG, {
  ...props,
  children: jsx5("path", {
    d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
  })
});
var RadioIcon = (props) => jsxs3(import_react10.default.Fragment, {
  children: [jsx5(RadioChecked, {
    ...props,
    ...__internalProps({
      __css: {
        display: "none",
        "input:checked ~ &": {
          display: "block"
        }
      }
    })
  }), jsx5(RadioUnchecked, {
    ...props,
    ...__internalProps({
      __css: {
        display: "block",
        "input:checked ~ &": {
          display: "none"
        }
      }
    })
  })]
});
var Radio = import_react10.default.forwardRef(function Radio2({
  className,
  sx,
  variant = "radio",
  ...props
}, ref) {
  return jsxs3(Box$1, {
    sx: {
      minWidth: "min-content"
    },
    children: [jsx5(Box$1, {
      ref,
      as: "input",
      type: "radio",
      ...props,
      sx: {
        position: "absolute",
        opacity: 0,
        zIndex: -1,
        width: 1,
        height: 1,
        overflow: "hidden"
      }
    }), jsx5(Box$1, {
      as: RadioIcon,
      "aria-hidden": "true",
      variant,
      className,
      sx,
      ...__internalProps({
        __themeKey: "forms",
        __css: {
          mr: 2,
          borderRadius: 9999,
          color: "gray",
          flexShrink: 0,
          "input:checked ~ &": {
            color: "primary"
          },
          "input:focus ~ &": {
            bg: "highlight"
          }
        }
      })
    })]
  });
});
var CheckboxChecked = (props) => jsx5(SVG, {
  ...props,
  children: jsx5("path", {
    d: "M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
  })
});
var CheckboxUnchecked = (props) => jsx5(SVG, {
  ...props,
  children: jsx5("path", {
    d: "M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
  })
});
var CheckboxIcon = (props) => jsxs3(import_react10.default.Fragment, {
  children: [jsx5(CheckboxChecked, {
    ...props,
    ...__internalProps({
      __css: {
        display: "none",
        "input:checked ~ &": {
          display: "block"
        }
      }
    })
  }), jsx5(CheckboxUnchecked, {
    ...props,
    ...__internalProps({
      __css: {
        display: "block",
        "input:checked ~ &": {
          display: "none"
        }
      }
    })
  })]
});
var Checkbox = import_react10.default.forwardRef(function Checkbox2({
  className,
  sx,
  variant = "checkbox",
  children,
  ...props
}, ref) {
  return jsxs3(Box$1, {
    sx: {
      minWidth: "min-content"
    },
    children: [jsx5(Box$1, {
      ref,
      as: "input",
      type: "checkbox",
      ...props,
      sx: {
        position: "absolute",
        opacity: 0,
        zIndex: -1,
        width: 1,
        height: 1,
        overflow: "hidden"
      }
    }), jsx5(Box$1, {
      as: CheckboxIcon,
      "aria-hidden": "true",
      variant,
      className,
      sx,
      ...__internalProps({
        __themeKey: "forms",
        __css: {
          mr: 2,
          borderRadius: 4,
          color: "gray",
          flexShrink: 0,
          "input:checked ~ &": {
            color: "primary"
          },
          "input:focus ~ &": {
            color: "primary",
            bg: "highlight"
          }
        }
      })
    }), children]
  });
});
var GUTTER = 2;
var SIZE = 18;
var Switch = import_react10.default.forwardRef(function Switch2({
  className,
  label,
  sx,
  variant = "switch",
  ...rest
}, ref) {
  const __css = {
    position: "relative",
    flexShrink: 0,
    bg: "gray",
    borderRadius: SIZE,
    height: SIZE + GUTTER * 2,
    width: SIZE * 2 + GUTTER * 2,
    mr: 2,
    "input:disabled ~ &": {
      opacity: 0.5,
      cursor: "not-allowed"
    },
    "& > div": {
      display: "flex",
      alignItems: "center",
      borderRadius: "50%",
      height: SIZE,
      width: SIZE,
      bg: "white",
      boxShadow: "0 1px 2px rgba(0, 0, 0, 0.1)",
      position: "relative",
      transform: "translateX(0%)",
      transition: `transform 240ms cubic-bezier(0.165, 0.840, 0.440, 1.000)`
    },
    "input:checked ~ &": {
      bg: "primary",
      "> div": {
        transform: "translateX(100%)"
      }
    }
  };
  return jsxs3(Label, {
    sx: {
      cursor: "pointer"
    },
    children: [jsx5(Box$1, {
      ref,
      as: "input",
      type: "checkbox",
      "aria-label": label,
      ...rest,
      sx: {
        position: "absolute",
        opacity: 0,
        zIndex: -1,
        width: 1,
        height: 1,
        overflow: "hidden"
      },
      ...__internalProps({
        __themeKey: "forms"
      })
    }), jsx5(Box$1, {
      css: {
        padding: GUTTER
      },
      variant,
      className,
      sx,
      ...__internalProps({
        __themeKey: "forms",
        __css
      }),
      children: jsx5(Box$1, {})
    }), jsx5("span", {
      children: label
    })]
  });
});
var thumbStyle = {
  appearance: "none",
  width: 16,
  height: 16,
  bg: "currentcolor",
  border: 0,
  borderRadius: 9999,
  variant: "forms.slider.thumb"
};
var sliderStyle = {
  display: "block",
  width: "100%",
  height: 4,
  my: 2,
  cursor: "pointer",
  appearance: "none",
  borderRadius: 9999,
  color: "inherit",
  bg: "gray",
  ":focus": {
    outline: "none",
    color: "primary"
  },
  "&::-webkit-slider-thumb": thumbStyle,
  "&::-moz-range-thumb": thumbStyle,
  "&::-ms-thumb": thumbStyle
};
var Slider = import_react10.default.forwardRef(function Slider2(props, ref) {
  return jsx5(Box$1, {
    ref,
    as: "input",
    type: "range",
    variant: "slider",
    ...props,
    ...__internalProps({
      __themeKey: "forms",
      __css: sliderStyle
    })
  });
});
var Field = import_react10.default.forwardRef(function Field2({
  // if somebody specifies the generic parameter without passing `as` prop, they get Input anyway
  as: Control = Input,
  label,
  id,
  name,
  ...rest
}, ref) {
  const fieldIdentifier = id || name;
  const controlProps = {
    ref,
    name,
    id: fieldIdentifier,
    ...omitMargin(rest)
  };
  return jsxs3(Box$1, {
    ...getMargin(rest),
    children: [jsx5(Label, {
      htmlFor: fieldIdentifier,
      children: label
    }), jsx5(Control, {
      ...controlProps
    })]
  });
});
var Progress = import_react10.default.forwardRef(function Progress2(props, ref) {
  const __css = {
    display: "block",
    width: "100%",
    height: "4px",
    margin: 0,
    padding: 0,
    overflow: "hidden",
    appearance: "none",
    color: "primary",
    bg: "gray",
    borderRadius: 9999,
    border: "none",
    "&::-webkit-progress-bar": {
      bg: "transparent"
    },
    "&::-webkit-progress-value": {
      bg: "currentcolor"
    },
    "&::-moz-progress-bar": {
      bg: "currentcolor"
    }
  };
  return jsx5(Box$1, {
    ref,
    as: "progress",
    variant: "styles.progress",
    ...props,
    ...__internalProps({
      __css
    })
  });
});
var Donut = import_react10.default.forwardRef(function Donut2({
  size = 128,
  strokeWidth = 2,
  value = 0,
  min = 0,
  max = 1,
  title,
  ...props
}, ref) {
  const r = 16 - (typeof strokeWidth === "number" ? strokeWidth : parseFloat(strokeWidth));
  const C = 2 * r * Math.PI;
  const offset = C - (value - min) / (max - min) * C;
  const svgProps = {
    strokeWidth,
    viewBox: "0 0 32 32",
    width: size,
    height: size,
    fill: "none",
    stroke: "currentcolor"
  };
  return jsxs3(Box$1, {
    ref,
    as: "svg",
    role: "img",
    "aria-valuenow": value,
    "aria-valuemin": min,
    "aria-valuemax": max,
    ...svgProps,
    ...props,
    ...__internalProps({
      __css: {
        color: "primary"
      }
    }),
    children: [title && jsx5("title", {
      children: title
    }), jsx5("circle", {
      cx: 16,
      cy: 16,
      r,
      opacity: 1 / 8
    }), jsx5("circle", {
      cx: 16,
      cy: 16,
      r,
      strokeDasharray: C,
      strokeDashoffset: offset,
      transform: "rotate(-90 16 16)"
    })]
  });
});
var Spinner = import_react10.default.forwardRef(function Spinner2({
  size = 48,
  strokeWidth = 4,
  max = 1,
  title = "Loading",
  duration = 750,
  ...props
}, ref) {
  const __css = {
    color: "primary",
    overflow: "visible"
  };
  const svgProps = {
    strokeWidth,
    viewBox: "0 0 32 32",
    width: size,
    height: size,
    fill: "none",
    stroke: "currentColor",
    role: "img"
  };
  const circleProps = {
    strokeWidth,
    r: 16 - strokeWidth,
    cx: 16,
    cy: 16,
    fill: "none"
  };
  return jsxs3(Box$1, {
    ref,
    as: "svg",
    ...svgProps,
    ...props,
    ...__internalProps({
      __css
    }),
    children: [jsx5("title", {
      children: title
    }), jsx5("circle", {
      ...circleProps,
      opacity: 1 / 8
    }), jsx5("circle", {
      ...circleProps,
      strokeDasharray: "20 110",
      children: jsx5("animateTransform", {
        attributeName: "transform",
        attributeType: "XML",
        type: "rotate",
        from: "0 16 16",
        to: "360 16 16",
        dur: `${duration}ms`,
        repeatCount: "indefinite"
      })
    })]
  });
});
var Avatar = import_react10.default.forwardRef(function Avatar2({
  size = 48,
  ...props
}, ref) {
  return jsx5(Image, {
    ref,
    width: size,
    height: size,
    variant: "avatar",
    ...props,
    ...__internalProps({
      __css: {
        borderRadius: 9999
      }
    })
  });
});
var Badge = import_react10.default.forwardRef(function Badge2(props, ref) {
  return jsx5(Box$1, {
    ref,
    variant: "primary",
    ...props,
    ...__internalProps({
      __themeKey: "badges",
      __css: {
        display: "inline-block",
        verticalAlign: "baseline",
        fontSize: 0,
        fontWeight: "bold",
        whiteSpace: "nowrap",
        px: 1,
        borderRadius: 2,
        color: "white",
        bg: "primary"
      }
    })
  });
});
var IconButton = import_react10.default.forwardRef(function IconButton2({
  size = 32,
  ...props
}, ref) {
  var _css;
  const emotionCssLabel = ((_css = props.__css) == null ? void 0 : _css.label) || "IconButton";
  return jsx5(Box$1, {
    ref,
    as: "button",
    variant: "icon",
    ...props,
    ...__internalProps({
      __themeKey: "buttons",
      __css: {
        label: emotionCssLabel,
        appearance: "none",
        display: "inline-flex",
        alignItems: "center",
        justifyContent: "center",
        padding: 1,
        width: size,
        height: size,
        color: "inherit",
        bg: "transparent",
        border: "none",
        borderRadius: 4
      }
    })
  });
});
var CloseIcon = jsx5("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  width: "24",
  height: "24",
  fill: "currentColor",
  viewBox: "0 0 24 24",
  children: jsx5("path", {
    d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
  })
});
var Close = import_react10.default.forwardRef(function Close2({
  size = 32,
  ...props
}, ref) {
  return jsx5(IconButton, {
    ref,
    size,
    title: "Close",
    "aria-label": "Close",
    variant: "close",
    ...props,
    children: CloseIcon
  });
});
var Alert = import_react10.default.forwardRef(function Alert2(props, ref) {
  return jsx5(Box$1, {
    ref,
    variant: "primary",
    ...props,
    ...__internalProps({
      __themeKey: "alerts",
      __css: {
        display: "flex",
        alignItems: "center",
        px: 3,
        py: 2,
        fontWeight: "bold",
        color: "white",
        bg: "primary",
        borderRadius: 4
      }
    })
  });
});
var Divider = import_react10.default.forwardRef(function Divider2(props, ref) {
  return jsx5(Box$1, {
    ref,
    as: "hr",
    variant: "styles.hr",
    ...props,
    ...__internalProps({
      __css: {
        color: "gray",
        m: 0,
        my: 2,
        border: 0,
        borderBottom: "1px solid"
      }
    })
  });
});
var getContainerProps = getProps(__isBoxStyledSystemProp);
var getIframeProps = getProps((str) => !__isBoxStyledSystemProp(str));
var Embed = import_react10.default.forwardRef(function Embed2({
  variant,
  sx,
  ratio = 16 / 9,
  src,
  frameBorder = 0,
  allowFullScreen = true,
  width = 560,
  height = 315,
  allow,
  ...rest
}, ref) {
  const iframeProps = {
    src,
    width,
    height,
    frameBorder,
    allowFullScreen,
    allow,
    ...getIframeProps(rest)
  };
  return jsx5(Box$1, {
    variant,
    sx,
    ...getContainerProps(rest),
    ...__internalProps({
      __css: {
        width: "100%",
        height: 0,
        paddingBottom: 100 / ratio + "%",
        position: "relative",
        overflow: "hidden"
      }
    }),
    children: jsx5(Box$1, {
      ref,
      as: "iframe",
      ...iframeProps,
      ...__internalProps({
        __css: {
          position: "absolute",
          width: "100%",
          height: "100%",
          top: 0,
          bottom: 0,
          left: 0,
          border: 0
        }
      })
    })
  });
});
var AspectRatio = import_react10.default.forwardRef(function AspectRatio2({
  ratio = 4 / 3,
  children,
  ...props
}, ref) {
  return jsxs3(Box$1, {
    ref,
    sx: {
      position: "relative",
      overflow: "hidden"
    },
    children: [jsx5(Box$1, {
      sx: {
        width: "100%",
        height: 0,
        paddingBottom: 100 / ratio + "%"
      }
    }), jsx5(Box$1, {
      ...props,
      ...__internalProps({
        __css: {
          position: "absolute",
          top: 0,
          right: 0,
          bottom: 0,
          left: 0
        }
      }),
      children
    })]
  });
});
var AspectImage = import_react10.default.forwardRef(function AspectImage2({
  ratio,
  ...props
}, ref) {
  return jsx5(AspectRatio, {
    ratio,
    children: jsx5(Image, {
      ref,
      ...props,
      ...__internalProps({
        __css: {
          objectFit: "cover"
        }
      })
    })
  });
});
var Container = import_react10.default.forwardRef(function Container2(props, ref) {
  return jsx5(Box$1, {
    ref,
    variant: "container",
    ...props,
    ...__internalProps({
      __themeKey: "layout",
      __css: {
        width: "100%",
        maxWidth: "container",
        mx: "auto"
      }
    })
  });
});
var NavLink = import_react10.default.forwardRef(function NavLink2(props, ref) {
  const __css = {
    color: "inherit",
    textDecoration: "none",
    fontWeight: "bold",
    display: "inline-block",
    "&:hover, &:focus, &.active": {
      color: "primary"
    }
  };
  return jsx5(Link, {
    ref,
    variant: "nav",
    ...props,
    ...__internalProps({
      __css
    })
  });
});
var Message = import_react10.default.forwardRef(function Message2(props, ref) {
  const __css = {
    padding: 3,
    paddingLeft: (t) => t.space && Number(t.space[3]) - Number(t.space[1]),
    borderLeftWidth: (t) => t.space && Number(t.space[1]),
    borderLeftStyle: "solid",
    borderLeftColor: "primary",
    borderRadius: 4,
    bg: "highlight"
  };
  return jsx5(Box$1, {
    ref,
    ...props,
    ...__internalProps({
      __themeKey: "messages",
      __css
    })
  });
});
var MenuIcon = ({
  size = 24
}) => {
  return jsx5("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 24 24",
    width: size,
    height: size,
    fill: "currentColor",
    css: {
      display: "block",
      margin: 0,
      boxSizing: "border-box",
      minWidth: 0
    },
    children: jsx5("path", {
      d: "M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"
    })
  });
};
var MenuButton = import_react10.default.forwardRef(function MenuButton2(props, ref) {
  return jsx5(IconButton, {
    ref,
    title: "Menu",
    "aria-label": "Toggle Menu",
    variant: "menu",
    ...props,
    children: jsx5(MenuIcon, {})
  });
});

// node_modules/theme-ui/dist/theme-ui.esm.js
var BaseStyles = (props) => jsx6("div", {
  ...props,
  sx: {
    fontFamily: "body",
    lineHeight: "body",
    fontWeight: "body",
    variant: "styles",
    ...props.sx
  }
});
var jsx6 = jsx2;
export {
  Alert,
  AspectImage,
  AspectRatio,
  Avatar,
  Badge,
  BaseStyles,
  Box$1 as Box,
  Button,
  Card,
  Checkbox,
  Close,
  CloseIcon,
  Container,
  Divider,
  Donut,
  Embed,
  Field,
  Flex,
  Global2 as Global,
  Grid,
  Heading,
  IconButton,
  Image,
  InitializeColorMode,
  Input,
  Label,
  Link,
  MenuButton,
  MenuIcon,
  Message,
  NavLink,
  Paragraph,
  Progress,
  Radio,
  Select,
  Slider,
  Spinner,
  Switch,
  Text,
  Textarea,
  ThemeProvider2 as ThemeProvider,
  ThemeUIProvider,
  __ThemeUIContext,
  __isBoxStyledSystemProp,
  createElement,
  css,
  get,
  jsx6 as jsx,
  merge,
  useColorMode,
  useThemeUI
};
//# sourceMappingURL=theme-ui.js.map

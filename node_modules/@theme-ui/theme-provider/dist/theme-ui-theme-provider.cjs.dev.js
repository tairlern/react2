'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var core = require('@theme-ui/core');
var css = require('@theme-ui/css');
var colorModes = require('@theme-ui/color-modes');
var react = require('@emotion/react');
var jsxRuntime = require('@theme-ui/core/jsx-runtime');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefault(React);

const RootStyles = () => core.jsx(react.Global, {
  styles: emotionTheme => {
    var _theme$config;
    const theme = emotionTheme;
    const {
      useRootStyles
    } = theme.config || theme;
    if (useRootStyles === false || theme.styles && !theme.styles.root) {
      return null;
    }
    const boxSizing = ((_theme$config = theme.config) == null ? void 0 : _theme$config.useBorderBox) === false ? undefined : 'border-box';
    return css.css({
      '*': {
        boxSizing
      },
      html: {
        variant: 'styles.root'
      },
      body: {
        margin: 0
      }
    })(theme);
  }
});
const ThemeUIProvider = ({
  theme,
  children
}) => {
  const outer = core.useThemeUI();
  const isTopLevel = outer === core.__themeUiDefaultContextValue;
  return jsxRuntime.jsx(core.ThemeProvider, {
    theme: theme,
    children: jsxRuntime.jsxs(colorModes.ColorModeProvider, {
      children: [isTopLevel && jsxRuntime.jsx(RootStyles, {}), children]
    })
  });
};

/** @deprecated ThemeProvider is now called ThemeUIProvider to reduce confusion with Emotion */
const ThemeProvider = ({
  theme,
  children
}) => {
  React__default["default"].useEffect(() => {
    if (process.env.NODE_ENV !== 'production') {
      console.warn('[theme-ui] The export ThemeUIProvider is deprecated and is now called ThemeProvider to reduce confusion with Emotion. Please update your import; ThemeUIProvider will be removed in a future version.');
    }
  }, []);
  const outer = core.useThemeUI();
  const isTopLevel = outer === core.__themeUiDefaultContextValue;
  return jsxRuntime.jsx(core.ThemeProvider, {
    theme: theme,
    children: jsxRuntime.jsxs(colorModes.ColorModeProvider, {
      children: [isTopLevel && jsxRuntime.jsx(RootStyles, {}), children]
    })
  });
};

exports.ThemeProvider = ThemeProvider;
exports.ThemeUIProvider = ThemeUIProvider;

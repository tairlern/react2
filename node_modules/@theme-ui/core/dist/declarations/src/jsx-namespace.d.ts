import type { SxProp } from './types';
import type { JSX as ReactJSX } from 'react';
type WithConditionalSxProp<P> = 'className' extends keyof P ? string extends P['className'] ? P & SxProp : P : P;
export declare namespace ThemeUIJSX {
    type Element = ReactJSX.Element;
    type ElementType = ReactJSX.ElementType;
    type ElementClass = ReactJSX.ElementClass;
    type ElementAttributesProperty = ReactJSX.ElementAttributesProperty;
    type ElementChildrenAttribute = ReactJSX.ElementChildrenAttribute;
    type LibraryManagedAttributes<C, P> = WithConditionalSxProp<P> & ReactJSX.LibraryManagedAttributes<C, P>;
    type IntrinsicAttributes = ReactJSX.IntrinsicAttributes;
    type IntrinsicClassAttributes<T> = ReactJSX.IntrinsicClassAttributes<T>;
    type IntrinsicElements = {
        [K in keyof ReactJSX.IntrinsicElements]: ReactJSX.IntrinsicElements[K] & SxProp;
    };
}
export {};

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var react = require('@emotion/react');
var React = require('react');
var deepmerge = require('deepmerge');
var packageInfo = require('@emotion/react/package.json');
var parseProps = require('./parseProps-ca442ad1.cjs.prod.js');
require('@theme-ui/css');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespace(React);
var deepmerge__default = /*#__PURE__*/_interopDefault(deepmerge);
var packageInfo__default = /*#__PURE__*/_interopDefault(packageInfo);

const __EMOTION_VERSION__ = packageInfo__default["default"].version;
const jsx = (type, props, ...children) => react.jsx(type, parseProps.parseProps(props), ...children);

/**
 * @internal for Babel JSX pragma
 * @see https://github.com/system-ui/theme-ui/issues/1603
 */
const createElement = jsx;
/**
 * @internal
 */
const __themeUiDefaultContextValue = {
  __EMOTION_VERSION__,
  theme: {}
};

/**
 * @internal
 */
const __ThemeUIContext = /*#__PURE__*/React__namespace.createContext(__themeUiDefaultContextValue);
const useThemeUI = () => React__namespace.useContext(__ThemeUIContext);
const canUseSymbol = typeof Symbol === 'function' && Symbol.for;
const REACT_ELEMENT = canUseSymbol ? Symbol.for('react.element') : 0xeac7;
const FORWARD_REF = canUseSymbol ? Symbol.for('react.forward_ref') : 0xeac7;
const deepmergeOptions = {
  isMergeableObject: n => {
    return !!n && typeof n === 'object' && n.$$typeof !== REACT_ELEMENT && n.$$typeof !== FORWARD_REF;
  },
  arrayMerge: (_leftArray, rightArray) => rightArray
};

/**
 * Deeply merge themes
 */
const merge = (a, b) => deepmerge__default["default"](a, b, deepmergeOptions);
function mergeAll(...args) {
  return deepmerge__default["default"].all(args, deepmergeOptions);
}
merge.all = mergeAll;
/**
 * @internal
 */
const __ThemeUIInternalBaseThemeProvider = ({
  context,
  children
}) => jsx(react.ThemeContext.Provider, {
  value: context.theme
}, jsx(__ThemeUIContext.Provider, {
  value: context,
  children
}));
function ThemeProvider({
  theme,
  children
}) {
  const outer = useThemeUI();
  const context = typeof theme === 'function' ? {
    ...outer,
    theme: theme(outer.theme)
  } : merge.all({}, outer, {
    theme
  });
  return jsx(__ThemeUIInternalBaseThemeProvider, {
    context,
    children
  });
}

exports.ThemeProvider = ThemeProvider;
exports.__ThemeUIContext = __ThemeUIContext;
exports.__ThemeUIInternalBaseThemeProvider = __ThemeUIInternalBaseThemeProvider;
exports.__themeUiDefaultContextValue = __themeUiDefaultContextValue;
exports.createElement = createElement;
exports.jsx = jsx;
exports.merge = merge;
exports.useThemeUI = useThemeUI;

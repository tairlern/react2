'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var themeUi = require('theme-ui');
var jsxRuntime = require('@theme-ui/core/jsx-runtime');
var color = require('@theme-ui/color');
var Color = require('color');
var core = require('@theme-ui/core');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var Color__default = /*#__PURE__*/_interopDefault(Color);

const useTheme = () => themeUi.useThemeUI().theme;

const Card = props => jsxRuntime.jsx("div", {
  ...props,
  sx: {
    variant: 'styles.Card'
  }
});

const TypeStyle = ({
  fontSize = 5,
  fontFamily = 'body',
  lineHeight = 'body',
  fontWeight = 'body',
  children = 'Aa',
  truncate = true,
  ...props
}) => {
  return jsxRuntime.jsx(Card, {
    ...props,
    children: children,
    sx: {
      fontFamily,
      fontSize,
      lineHeight,
      fontWeight,
      ...(truncate ? {
        overflow: 'hidden',
        textOverflow: 'ellipsis',
        whiteSpace: 'nowrap'
      } : {})
    }
  });
};

const getValue = fontSize => typeof fontSize === 'number' ? `${fontSize}px` : fontSize;
const TypeScale = ({
  reverse = true,
  ...props
}) => {
  const theme = useTheme() || {};
  const fontSizeEntries = reverse ? Object.entries(theme.fontSizes || []).reverse() : Object.entries(theme.fontSizes || []);
  return jsxRuntime.jsx("div", {
    sx: {
      display: 'flex',
      flexWrap: 'wrap',
      alignItems: 'baseline'
    },
    children: fontSizeEntries.map(([key, val]) => {
      if (!val || typeof val === 'object') {
        // TODO: `theme.fontSizes` can be a deeply nested object.
        // We should either update the types or recursively render here.
        return null;
      }
      return jsxRuntime.jsx(TypeStyle, {
        fontSize: key,
        sx: {
          mr: 3
        },
        children: getValue(val),
        ...props
      }, key);
    })
  });
};

const HeadingStyle = props => jsxRuntime.jsx(TypeStyle, {
  fontFamily: "heading",
  fontWeight: "heading",
  lineHeight: "heading",
  ...props
});

const FontFamily = ({
  name
}) => {
  const {
    fonts
  } = useTheme();
  return themeUi.get(fonts, name);
};

const toHex = raw => {
  try {
    return Color__default["default"](raw).hex();
  } catch (e) {
    return;
  }
};

const ColorSwatch = ({
  color: color$1,
  name,
  size = 128,
  label = true,
  ...props
}) => {
  const theme = useTheme();
  const value = color.getColor(theme, color$1);
  return jsxRuntime.jsxs("div", {
    ...props,
    title: `${toHex(value)}`,
    children: [jsxRuntime.jsx("div", {
      sx: {
        width: size,
        height: size,
        bg: color$1
      }
    }), label && jsxRuntime.jsx("div", {
      sx: {
        py: 2
      },
      children: name || color$1
    })]
  });
};

const join = (...args) => args.filter(Boolean).join('.');
const ColorRow = ({
  colors,
  name,
  omit = ['modes'],
  render,
  size,
  ...props
}) => {
  return jsxRuntime.jsx("div", {
    children: jsxRuntime.jsx("div", {
      sx: {
        display: 'flex',
        flexWrap: 'wrap'
      },
      children: Object.keys(colors).map(key => {
        const color = colors[key];
        if (!color || omit.includes(key)) return false;
        const id = join(name, key);
        if (typeof color === 'object') {
          return core.createElement(ColorRow, {
            ...props,
            key: key,
            name: id,
            colors: color,
            size: size,
            omit: omit
          });
        }
        const swatch = core.createElement(ColorSwatch, {
          ...props,
          key: key,
          name: id,
          color: id,
          size: size,
          sx: {
            m: 2
          }
        });
        if (typeof render === 'function') {
          return render({
            swatch,
            color,
            key,
            name: id
          });
        }
        return swatch;
      })
    })
  });
};
const ColorPalette = ({
  omit,
  mode,
  ...props
}) => {
  const theme = useTheme();
  let colors = theme.colors;
  if (mode && colors.modes) {
    colors = colors.modes[mode] || colors;
  }
  return jsxRuntime.jsx("div", {
    style: {
      marginLeft: -8,
      marginRight: -8
    },
    children: jsxRuntime.jsx(ColorRow, {
      ...props,
      omit: omit,
      colors: colors
    })
  });
};

const ThemeCard = props => {
  return jsxRuntime.jsxs(Card, {
    ...props,
    sx: {
      color: 'text',
      bg: 'background'
    },
    children: [jsxRuntime.jsx(TypeStyle, {}), jsxRuntime.jsx(ColorPalette, {
      label: false,
      size: 32
    })]
  });
};

exports.ColorPalette = ColorPalette;
exports.ColorSwatch = ColorSwatch;
exports.FontFamily = FontFamily;
exports.HeadingStyle = HeadingStyle;
exports.ThemeCard = ThemeCard;
exports.TypeScale = TypeScale;
exports.TypeStyle = TypeStyle;
exports.useTheme = useTheme;
